api_name: []
items:
- _type: module
  children:
  - cntk.device.DeviceDescriptor
  - cntk.device.DeviceKind
  module: cntk.device
  name: cntk.device
  summary: ''
  type: Namespace
  uid: cntk.device
- _type: class
  children:
  - cntk.device.all_devices
  - cntk.device.cpu
  - cntk.device.get_gpu_properties
  - cntk.device.gpu
  - cntk.device.set_default_device
  - cntk.device.set_excluded_devices
  - cntk.device.try_set_default_device
  - cntk.device.use_default_device
  module: cntk.device
  name: cntk.device.Global
  summary: Proxy object to hold module level functions
  type: Class
  uid: cntk.device.Global
- _type: class
  children:
  - cntk.device.DeviceDescriptor.id
  - cntk.device.DeviceDescriptor.is_locked
  - cntk.device.DeviceDescriptor.type
  module: cntk.device
  name: cntk.device.DeviceDescriptor
  summary: 'Describes a device by an unique id and its type. If the device corresponds

    to a GPU its type is 1, otherwise, it is 0

    '
  type: Class
  uid: cntk.device.DeviceDescriptor
- _type: method
  class: cntk.device.DeviceDescriptor
  module: cntk.device
  name: cntk.device.DeviceDescriptor.id
  summary: "Returns id of device descriptor\n\nReturns:\n    `int`: id\n"
  type: Method
  uid: cntk.device.DeviceDescriptor.id
- _type: method
  class: cntk.device.DeviceDescriptor
  module: cntk.device
  name: cntk.device.DeviceDescriptor.is_locked
  summary: 'Returns `True` if another CNTK process already holds an exclusive lock
    on this device.

    '
  type: Method
  uid: cntk.device.DeviceDescriptor.is_locked
- _type: method
  class: cntk.device.DeviceDescriptor
  module: cntk.device
  name: cntk.device.DeviceDescriptor.type
  summary: "Returns type of device descriptor. 1 if it is a GPU device or 0 if CPU.\n\
    \nReturns:\n    `int`: type\n"
  type: Method
  uid: cntk.device.DeviceDescriptor.type
- _type: class
  children: []
  module: cntk.device
  name: cntk.device.DeviceKind
  summary: 'Describes different device kinds like CPU or GPU.

    '
  type: Class
  uid: cntk.device.DeviceKind
- _type: function
  module: cntk.device
  name: cntk.device.all_devices
  summary: "Returns a device descriptor list with all the available devices\n\nReturns:\n\
    \    :class:`~cntk.device.DeviceDescriptor` list: all device descriptors\n"
  type: Method
  uid: cntk.device.all_devices
- _type: function
  module: cntk.device
  name: cntk.device.cpu
  summary: "Returns CPU device descriptor\n\nReturns:\n    :class:`~cntk.device.DeviceDescriptor`:\
    \ CPU device descriptor\n"
  type: Method
  uid: cntk.device.cpu
- _type: function
  module: cntk.device
  name: cntk.device.get_gpu_properties
  summary: "Retrieves and returns additional properties (total memory, number of CUDA\
    \ cores, etc.) for \nthe specified GPU device. This method will raise an exception\
    \ if a CPU device is specified \nas an argument.\n\nArgs:\n    device (:class:`~cntk.device.DeviceDescriptor`):\
    \ a GPU device descriptor.\n\n Returns:\n    :class:`~cntk.cntk_py.GPUProperties`:\
    \ GPU device properties\n"
  type: Method
  uid: cntk.device.get_gpu_properties
- _type: function
  module: cntk.device
  name: cntk.device.gpu
  summary: "Returns GPU device descriptor\n\nReturns:\n    :class:`~cntk.device.DeviceDescriptor`:\
    \ GPU device descriptor\n"
  type: Method
  uid: cntk.device.gpu
- _type: function
  module: cntk.device
  name: cntk.device.set_default_device
  summary: 'See :func:`try_set_default_device`

    '
  type: Method
  uid: cntk.device.set_default_device
- _type: function
  module: cntk.device
  name: cntk.device.set_excluded_devices
  summary: "Allows to specify a list of excluded devices that cannot be used as globally\
    \ default (neither \nauto-selected nor explicitly specified by :func:`try_set_default_device`).\
    \ For example, to avoid \nauto-selecting the CPU, invoke ``set_excluded_devices([cpu()])``.\
    \ However, after the default \ndevice has been selected and frozen (by a call\
    \ to :func:`use_default_device`), invoking this \nmethods has no effect, it becomes\
    \ essentially a no-op.\n\nArgs:\n    excluded_devices (list of :class:`~cntk.device.DeviceDescriptor`):\
    \ a list of device descriptors\n     to exclude.\n"
  type: Method
  uid: cntk.device.set_excluded_devices
- _type: function
  module: cntk.device
  name: cntk.device.try_set_default_device
  summary: "Tries to set the specified device as the globally default, optionally\
    \ acquiring an exclusive \n(cooperative) lock on the device (only a GPU device\
    \ can be locked).\n\nArgs:\n    new_default_device (:class:`~cntk.device.DeviceDescriptor`):\
    \ a descriptor of the device \n     to be used as a globally default.\n    acquire_device_lock\
    \ (bool, defaults to `False`): whether or not a lock should be acquired\n    \
    \ for the specified device.\n\nThe default device can only be changed if it has\
    \ not yet been frozen by being implicitly used \nin any previous CNTK operation.\
    \ \n\nCNTK uses a cooperative synchronization for the device access, whereby only\
    \ a single process \ncan acquire a device lock. However, if exclusivity is not\
    \ required, the same device can still \nbe accessed without acquiring any locks\
    \ (in which case, any existing lock corresponding to the\ndevice will be ignored).\n\
    \nReturns: `False` if\n    * the specified device appears in the list of excluded\
    \ devices;\n    * `acquire_device_lock` is `True` and another process already\
    \ holds a lock on the device;\n    * `acquire_device_lock` is `True` and `new_default_device`\
    \ corresponds to a CPU device \n      (which cannot be locked).\n"
  type: Method
  uid: cntk.device.try_set_default_device
- _type: function
  module: cntk.device
  name: cntk.device.use_default_device
  summary: "Freezes the default device of the current CNTK process disallowing further\
    \ changes\nthrough calls to :func:`try_set_default_device`. This default device\
    \ will used for all \nCNTK operations where a device needs to be specified and\
    \ where none was explicitly \nprovided. If no device has been specified with a\
    \ call to :func:`try_set_default_device`, \non the first invocation, this methods\
    \ will auto-select one of the available (non-locked) \ndevices as the default.\n\
    \nReturns:\n    :class:`~cntk.device.DeviceDescriptor`: descriptor of the globally\
    \ default device\n"
  type: Method
  uid: cntk.device.use_default_device
